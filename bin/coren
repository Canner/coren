#!/usr/bin/env node

const path = require('path');
const Ssr = require('../server/ssr');
const build = require('../server/build');
const program = require('commander');
const {initialize} = require('../server/coren-working-space');
const pkg = require('../../package.json');
const {color} = require('../server/utils');

const env = process.env.NODE_ENV;

program
  .version(pkg.version);

// dev
program
  .command('dev [dir]')
  .option('--watch', 'watch the change')
  .action(function(dir, options) {
    // const {watch} = options;
    dir = dir || process.cwd();
    console.log(`Start building ${dir}`);
    initialize(dir);
    build({dir, env})
    .then(() => {
      const ssr = new Ssr({dir, skipssr: true, env: env ? env : 'development'});
      ssr.render().then(() => {
        console.log(color.success('Success build coren server side render'));
      });
    })
    .catch(err => {
      console.log(err);
      process.exit(1);
    });
  });

// build
program
  .command('build [dir]')
  .option('--webpack [webpackPath]', 'webpack path')
  .action(function(dir, options) {
    dir = dir || process.cwd();
    console.log(`Start building ${dir}`);
    const {webpack} = options;
    initialize(dir);
    build({dir, env: 'production', clientWebpackPath: path.resolve(webpack)})
    .then(() => {
      const ssr = new Ssr({dir, skipssr: false, env});
      ssr.render();
      console.log(color.success('Success build coren server side render'));
    });
  });

program
  .arguments('<cmd>')
  .action(function(cmd) {
    if (typeof cmd === 'undefined') {
      console.error('no command given!');
    }
    console.log('unknown command');
    program.outputHelp();
  });

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
program.parse(process.argv);
